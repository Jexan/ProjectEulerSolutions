# The numbers of perimeters under 1.500.000 that can be generated by only one rectangle triangle by integer sides.
# NORMAL (<3s)
# 
# APPROACH:
#   Use a formula to generate primitive Pythagorean Triplets. This allows to generate the perimeters
#   incredibly fast. The formula is:
#   - (m**2 - n**2, 2*mn, m**2 + n**2), where every triplet field is a side. (gcd(n,m) == 1 and m, n are not both odd)
#   
#   Since we only care about the perimeter, we obtain the formula:
#   P = 2m*(m + n)
#   
#   This only generate the primitive triplets. So, we also take into account the other triplets and perimeters:
#   kP, where kP < 1.500.000  
#   
#   The number of perimeters are kept track with a simple list.

from math import sqrt, floor, gcd

limit = 1500001
counter = [0] * limit

for m in range(1, floor(sqrt(limit))):
    sqr_m = m**2
    for n in range(1, m):
        if gcd(m, n) != 1 or (m % 2 and n % 2):
            continue

        perimeter = 2*(sqr_m + m*n) 

        if perimeter > limit:
            break
        else:
            times = limit // perimeter 

            for i in range(1, times+1):
                counter[perimeter*i] += 1 

result = len(tuple(v for v in counter if v == 1))